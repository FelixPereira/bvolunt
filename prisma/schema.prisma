// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Volunteer {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String @unique
  telephone             String
  password              String
  isAdmin               Boolean
  address               Address?
  profission            String?
  avatar                String?
  emailVerified         Boolean
  hashedPassword        String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  socialOrganizationIDs String[] @db.ObjectId
  socialOrganizations   SocialOrganization[] @relation(fields: [socialOrganizationIDs], references: [id])
  
  socialProjects        SocialProject[]
  events                Event[]
}

model SocialProject {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  title                String @unique
  description          String
  totalVolunteers      Int
  coverImg             String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  socialOrganizationId String @db.ObjectId
  volunteerId          String @db.ObjectId
  provinceId           String @db.ObjectId
  organizationOwner    SocialOrganization @relation(fields: [socialOrganizationId], references: [id])
  volunteer            Volunteer @relation(fields: [volunteerId], references: [id])
  province             Province @relation(fields: [provinceId], references: [id])
}

model SocialOrganization {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String @unique
  totalVolunteer Int
  responsible    String
  address        Address?
  telephone      String
  createdAt      DateTime @default(now())  
  updatedAt      DateTime @default(now())

  volunteerIDs   String[] @db.ObjectId
  provinceId     String @db.ObjectId
  volunteers     Volunteer[] @relation(fields: [volunteerIDs], references: [id])
  province       Province @relation(fields: [provinceId], references: [id])

  socialProjects SocialProject[]
  events         Event[]
}

model Event {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  participantCount     Int
  sponsors             String[] @db.ObjectId
  location             Address
  status               String
  email                String
  telephone            String
  startDate            DateTime
  endDate              DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  volunteerId          String @db.ObjectId
  provinceIDs          String[] @db.ObjectId
  socialOrganizationId String @db.ObjectId

  volunteer            Volunteer @relation(fields: [volunteerId], references: [id])
  provinces            Province[] @relation(fields: [provinceIDs], references: [id])
  socialOrganization   SocialOrganization @relation(fields: [socialOrganizationId], references: [id])

}

model Province {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  name                String @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  eventsIDs           String[] @db.ObjectId
  events              Event[] @relation(fields: [eventsIDs], references: [id])

  socialProjects      SocialProject[]
  socialOrganizations SocialOrganization[]
}


type Address {
  street String
  county String
  province String
}



