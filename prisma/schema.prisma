// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  volunteerId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String @db.String
  session_state String?
  
  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Volunteer {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String? @unique
  telephone             String?
  address               Address?
  profission            String?
  image                 String?
  emailVerified         DateTime?
  hashedPassword        String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  socialOrganizationIDs String[] @db.ObjectId
  socialOrganizations   SocialOrganization[] @relation(fields: [socialOrganizationIDs], references: [id])
  
  socialProjects        SocialProject[]
  events                Event[]
  account               Account[]
}

model SocialProject {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  title                String @unique
  description          String
  totalVolunteers      Int
  province             String
  county               String
  address              String
  coverImg             String?
  responsible          String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  socialOrganizationId String? @db.ObjectId
  volunteerId          String? @db.ObjectId
  organizationOwner    SocialOrganization? @relation(fields: [socialOrganizationId], references: [id])
  volunteer            Volunteer? @relation(fields: [volunteerId], references: [id])
}

model SocialOrganization {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String @unique
  totalVolunteer Int
  responsible    String
  address        Address?
  telephone      String
  createdAt      DateTime @default(now())  
  updatedAt      DateTime @default(now())

  volunteerIDs   String[] @db.ObjectId
  provinceId     String @db.ObjectId
  volunteers     Volunteer[] @relation(fields: [volunteerIDs], references: [id])

  socialProjects SocialProject[]
  events         Event[]
}

model Event {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  participantCount     Int
  sponsors             String[] @db.ObjectId
  location             Address
  status               String
  email                String
  telephone            String
  startDate            DateTime
  endDate              DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  volunteerId          String @db.ObjectId
  provinceIDs          String[] @db.ObjectId
  socialOrganizationId String @db.ObjectId

  volunteer            Volunteer @relation(fields: [volunteerId], references: [id])
  socialOrganization   SocialOrganization @relation(fields: [socialOrganizationId], references: [id])

}


type Address {
  street String
  county String
  province String
}



