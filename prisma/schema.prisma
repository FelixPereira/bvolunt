// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  provider          String
  providerAccountId String
  type              AccountType
  refresh_token     String?            @db.String
  expires_at        Int?
  token_type        String?
  id_token          String             @db.String
  session_state     String?
  userId            String             @unique @db.ObjectId
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId    String             @unique @db.ObjectId
  organization      SocialOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?              @unique
  telephone             String?
  address               String?
  avatar                String?
  profission            String?
  hashedPassword        String?
  birthDate             DateTime?
  genre                 Genre?
  province              String?
  county                String?
  role                  Role?                @default(USER)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now())
  eventIDs              String[]             @db.ObjectId
  events                Event[]              @relation(fields: [eventIDs], references: [id])
  socialProjectIDs      String[]             @db.ObjectId
  socialProjects        SocialProject[]      @relation(fields: [socialProjectIDs], references: [id])
  socialOrganizationIDs String[]             @db.ObjectId
  socialOrganizations   SocialOrganization[] @relation(fields: [socialOrganizationIDs], references: [id])
  account               Account?
}

model SocialProject {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String
  province             String
  county               String
  address              String
  coverImage           String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  volunteerIDs         String[]           @db.ObjectId
  volunteers           User[]             @relation(fields: [volunteerIDs], references: [id])
  socialOrganizationId String             @db.ObjectId
  socialOrganization   SocialOrganization @relation(fields: [socialOrganizationId], references: [id], onDelete: Cascade)
  sponsorIDs           String[]           @db.ObjectId
  sponsors             Sponsor[]          @relation(fields: [sponsorIDs], references: [id])
}

model SocialOrganization {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String?         @unique
  responsibleName  String
  responsibleEmail String
  responsiblePhone String
  logo             String
  province         String
  county           String
  address          String
  telephone        String
  coverImage       String?
  description      String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  volunteerIDs     String[]        @db.ObjectId
  volunteers       User[]          @relation(fields: [volunteerIDs], references: [id])
  socialProjects   SocialProject[]
  events           Event[]
  sponsorIDs       String[]        @db.ObjectId
  sponsors         Sponsor[]       @relation(fields: [sponsorIDs], references: [id])
  account          Account?
}

model Event {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  province             String
  county               String
  address              String
  startDate            DateTime
  endDate              DateTime
  status               EventStatus        @default(UPCOMMING)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  volunteerIDs         String[]           @db.ObjectId
  volunteers           User[]             @relation(fields: [volunteerIDs], references: [id])
  socialOrganizationID String             @db.ObjectId
  socialOrganization   SocialOrganization @relation(fields: [socialOrganizationID], references: [id])
  sponsorIDs           String[]           @db.ObjectId
  sponsors             Sponsor[]          @relation(fields: [sponsorIDs], references: [id])
}

model Sponsor {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  logoUrl               String
  eventsIDs             String[]             @db.ObjectId
  events                Event[]              @relation(fields: [eventsIDs], references: [id])
  socialOrganizationIDs String[]             @db.ObjectId
  socialOrganizations   SocialOrganization[] @relation(fields: [socialOrganizationIDs], references: [id])
  socialProjectIDs      String[]             @db.ObjectId
  socialProjects        SocialProject[]      @relation(fields: [socialProjectIDs], references: [id])
}

enum Role {
  USER
  ADMIN
  VOLUNTEER
}

enum TypeOfAccount {
  USER
  ORGANIZATION
}

enum EventStatus {
  ONGOING
  FINISHED
  UPCOMMING
}

enum Genre {
  MASCULINO
  FEMININO
}

enum AccountType {
  USER
  ORGANIZATION
}
