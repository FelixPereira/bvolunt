// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  volunteerId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String @db.String
  session_state String?
  
  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Volunteer {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String? @unique
  telephone             String?
  address               String?
  profission            String?
  image                 String?
  emailVerified         DateTime?
  hashedPassword        String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  socialProjectsIds     String[]
  events                String[]

  socialOrganizationIDs String[] @db.ObjectId
  socialOrganizations   SocialOrganization[] @relation(fields: [socialOrganizationIDs], references: [id])
  
  account               Account[]
}

model SocialProject {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String
  totalVolunteers      Int
  province             String
  county               String
  address              String
  coverImage           String
  sponsors             String[]
  volunteerIds         String[]
  responsibleName      String
  responsiblePhone     String
  responsibleEmail     String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  
  socialOrganizationId String @db.ObjectId
  organizationOwner    SocialOrganization @relation(fields: [socialOrganizationId], references: [id], onDelete: Cascade)  
}

model SocialOrganization {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String @unique
  totalVolunteer  Int
  responsibleName String
  province        String
  county          String
  address         String
  telephone       String
  coverImage      String
  description     String
  createdAt       DateTime @default(now())  
  updatedAt       DateTime @default(now())

  volunteerIDs    String[] @db.ObjectId
  volunteers      Volunteer[] @relation(fields: [volunteerIDs], references: [id])

  socialProjects  SocialProject[]
  events          Event[]
}

model Event {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  participantCount     Int
  sponsors             String[] @db.ObjectId
  location             String
  status               String
  email                String
  telephone            String
  startDate            DateTime
  endDate              DateTime
  volunteerIds         String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  volunteerId          String @db.ObjectId
  provinceIDs          String[] @db.ObjectId
  socialOrganizationId String @db.ObjectId

  socialOrganization   SocialOrganization @relation(fields: [socialOrganizationId], references: [id])

}




